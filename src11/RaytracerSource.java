/**
 *  RaytracerSource.java
 *
 *  source code for a raytracer.
 *  has methods to add code dynamically.
 *
 *  @author  Brian Maltzan
 *  @version 99.3.1
 *  @since   JDK1.1.7A
 *  @serial
 */

public class RaytracerSource extends AlgSource{

   public RaytracerSource(){

//=======================
// start of static code

i=0;code[i]="import java.awt.*;";
i++;code[i]="";
i++;code[i]="//-------------------  p u b l i c    s t r u c t u r e s  --------";
i++;code[i]="final class T3d{";
i++;code[i]="   public double x,y,z;";
i++;code[i]="   public T3d(){}";
i++;code[i]="   public T3d(double a,double b,double c){";
i++;code[i]="      x=a;y=b;z=c;";
i++;code[i]="}  }";
i++;code[i]="final class TColor{";
i++;code[i]="   public double r,g,b;";
i++;code[i]="   public TColor(){}";
i++;code[i]="   public TColor(double r1,double g1,double b1){";
i++;code[i]="      r=r1; g=g1; b=b1;";
i++;code[i]="}  }";
i++;code[i]="final class TLight{";
i++;code[i]="   public double x,y,z;";
i++;code[i]="   public double bright;";
i++;code[i]="   public TLight(double x1,double y1,double z1, double bright1){";
i++;code[i]="      x=x1; y=y1; z=z1; bright=bright1;";
i++;code[i]="}  }";
i++;code[i]="";
i++;code[i]="public class Raytracer{";
i++;code[i]="   //-------------------------------  o b j e c t s ----------";
i++;code[i]="   abstract class TObject{";
i++;code[i]="      TColor ambiant= new TColor();";
i++;code[i]="      TColor diffuse= new TColor();";
i++;code[i]="      TColor specular= new TColor();";
i++;code[i]="      double coef; //specular coef";
i++;code[i]="      double refl; //reflection 0-1";
i++;code[i]="      double tran; //transparency 0-1";
i++;code[i]="";
i++;code[i]="      public void set_colors(double ar,double ag,double ab,"; 
i++;code[i]="                     double dr,double dg,double db,"; 
i++;code[i]="                     double sr,double sg,double sb,";
i++;code[i]="                     double c, double r, double t){";
i++;code[i]="         ambiant.r=ar; ambiant.g=ag; ambiant.b=ab;";
i++;code[i]="         diffuse.r=dr; diffuse.g=dg; diffuse.b=db;";
i++;code[i]="         specular.r=sr; specular.g=sg; specular.b=sb;";
i++;code[i]="         coef=c; refl=r; tran=t;";
i++;code[i]="      }";
i++;code[i]="      public abstract double objint(T3d a,T3d b);";
i++;code[i]="      public abstract void objnrm(T3d a,T3d b);";
i++;code[i]="   }";
i++;code[i]="   final class OSphere extends TObject{";
i++;code[i]="      double r, x,y,z;";
i++;code[i]="";
i++;code[i]="      public OSphere(double r1, double x1,double y1,double z1){";
i++;code[i]="         r=r1; x=x1; y=y1; z=z1;";
i++;code[i]="      }";
i++;code[i]="      public double objint(T3d pos, T3d ray){";
i++;code[i]="         double b,t,s=0, xadj,yadj,zadj;";
i++;code[i]="";
i++;code[i]="         xadj= pos.x-x; //translate ray origin to object's space";
i++;code[i]="         yadj= pos.y-y;";
i++;code[i]="         zadj= pos.z-z;";
i++;code[i]="";
i++;code[i]="         b= xadj*ray.x + yadj*ray.y + zadj*ray.z; //solve quadratic";
i++;code[i]="         if(b< -1e50) b= -1e50;";
i++;code[i]="         t= b*b - xadj*xadj - yadj*yadj - zadj*zadj + r*r;";
i++;code[i]="         if(t<0) return 0;";
i++;code[i]="";
i++;code[i]="         s= -b - Math.sqrt(t); //try smaller solution";
i++;code[i]="         if(s>0) return s;";
i++;code[i]="         s= -b + Math.sqrt(t); //try larger solution";
i++;code[i]="         if(s>0) return s;";
i++;code[i]="         return 0;          //both solutions <= 0";
i++;code[i]="      }";
i++;code[i]="      public void objnrm(T3d pos,T3d nrm){";
i++;code[i]="         nrm.x= (pos.x-x)/r;";
i++;code[i]="         nrm.y= (pos.y-y)/r;";
i++;code[i]="         nrm.z= (pos.z-z)/r;";
i++;code[i]="   }  }";
i++;code[i]="   final class OBox extends TObject{";
i++;code[i]="      int sidehit;";
i++;code[i]="      double x,y,z;     //center";
i++;code[i]="      double xs,ys,zs;  //size of sides";
i++;code[i]="      final double FAR_AWAY= 99.99E+20;";
i++;code[i]="";
i++;code[i]="      public OBox(double x1,double y1,double z1,";
i++;code[i]="                  double xs1,double ys1,double zs1){";
i++;code[i]="         x=x1; y=y1; z=z1; xs=xs1; ys=ys1; zs=zs1;";
i++;code[i]="      }";
i++;code[i]="      public double objint(T3d pos, T3d ray){";
i++;code[i]="         double s,ss, xhit,yhit,zhit;";
i++;code[i]="         double xadj,yadj,zadj;";
i++;code[i]="";
i++;code[i]="         ss= FAR_AWAY;";
i++;code[i]="         xadj= pos.x-x; //translate ray origin to objects space";
i++;code[i]="         yadj= pos.y-y;";
i++;code[i]="         zadj= pos.z-z;";
i++;code[i]="";
i++;code[i]="         if(ray.x!=0){      //check x faces";
i++;code[i]="            s= (xs-xadj)/ray.x;";
i++;code[i]="            if((s>0)&&(s<ss)){";
i++;code[i]="               yhit = Math.abs(yadj + s*ray.y);";
i++;code[i]="               zhit = Math.abs(zadj + s*ray.z);";
i++;code[i]="               if((yhit<ys)&&(zhit<zs)){";
i++;code[i]="                  sidehit= 0;";
i++;code[i]="                  ss= s;";
i++;code[i]="            }  }";
i++;code[i]="            s= (-xs-xadj)/ray.x;";
i++;code[i]="            if((s>0)&&(s<ss)){";
i++;code[i]="               yhit= Math.abs(yadj + s*ray.y);";
i++;code[i]="               zhit= Math.abs(zadj + s*ray.z);";
i++;code[i]="               if ((yhit<ys)&&(zhit<zs)){";
i++;code[i]="                  sidehit = 1;";
i++;code[i]="                  ss = s;";
i++;code[i]="         }  }  }";
i++;code[i]="         if(ray.y!=0){      //check y faces";
i++;code[i]="            s= (ys-yadj)/ray.y;";
i++;code[i]="            if((s>0)&&(s<ss)){";
i++;code[i]="               xhit = Math.abs(xadj + s*ray.x);";
i++;code[i]="               zhit = Math.abs(zadj + s*ray.z);";
i++;code[i]="               if((xhit<xs)&&(zhit<zs)){";
i++;code[i]="                  sidehit= 2;";
i++;code[i]="                  ss= s;";
i++;code[i]="            }  }";
i++;code[i]="            s= (-ys-yadj)/ray.y;";
i++;code[i]="            if((s>0)&&(s<ss)){";
i++;code[i]="               xhit= Math.abs(xadj + s*ray.x);";
i++;code[i]="               zhit= Math.abs(zadj + s*ray.z);";
i++;code[i]="               if ((xhit<xs)&&(zhit<zs)){";
i++;code[i]="                  sidehit = 3;";
i++;code[i]="                  ss = s;";
i++;code[i]="         }  }  }";
i++;code[i]="         if(ray.z!=0){      //check z faces";
i++;code[i]="            s= (zs-zadj)/ray.z;";
i++;code[i]="            if((s>0)&&(s<ss)){";
i++;code[i]="               xhit = Math.abs(xadj + s*ray.x);";
i++;code[i]="               yhit = Math.abs(yadj + s*ray.y);";
i++;code[i]="               if((xhit<xs)&&(yhit<ys)){";
i++;code[i]="                  sidehit= 0;";
i++;code[i]="                  ss= s;";
i++;code[i]="            }  }";
i++;code[i]="            s= (-zs-zadj)/ray.z;";
i++;code[i]="            if((s>0)&&(s<ss)){";
i++;code[i]="               xhit= Math.abs(xadj + s*ray.x);";
i++;code[i]="               yhit= Math.abs(yadj + s*ray.y);";
i++;code[i]="               if ((xhit<xs)&&(yhit<ys)){";
i++;code[i]="                  sidehit = 5;";
i++;code[i]="                  ss = s;";
i++;code[i]="         }  }  }";
i++;code[i]="         if (ss==FAR_AWAY) return 0;";
i++;code[i]="         return ss;";
i++;code[i]="      }";
i++;code[i]="      public void objnrm(T3d pos,T3d nrm){";
i++;code[i]="         nrm.x = 0; nrm.y = 0; nrm.z = 0;";
i++;code[i]="         switch (sidehit){";
i++;code[i]="            case(0): nrm.x=  1; break;";
i++;code[i]="            case(1): nrm.x= -1; break;";
i++;code[i]="            case(2): nrm.y=  1; break;";
i++;code[i]="            case(3): nrm.y= -1; break;";
i++;code[i]="            case(4): nrm.z=  1; break;";
i++;code[i]="            case(5): nrm.z= -1; break;";
i++;code[i]="   }  }  }";
i++;code[i]="   final class OTriangle extends TObject{";
i++;code[i]="      T3d nrm= new T3d();";
i++;code[i]="      double d;        //plane constant";
i++;code[i]="      double d1,d2,d3; //plane constants";
i++;code[i]="      T3d e1=new T3d(),e2=new T3d(),e3=new T3d(); //edge vector";
i++;code[i]="";
i++;code[i]="      public OTriangle(T3d p1, T3d p2, T3d p3){";
i++;code[i]="         T3d vc1=new T3d(p2.x-p1.x, p2.y-p1.y, p2.z-p1.z),";
i++;code[i]="             vc2=new T3d(p3.x-p2.x, p3.y-p2.y, p3.z-p2.z),";
i++;code[i]="             vc3=new T3d(p1.x-p3.x, p1.y-p3.y, p1.z-p3.z);";
i++;code[i]="";
i++;code[i]="         crossp(nrm,vc1,vc2); //triangle plane";
i++;code[i]="         d= dotp(nrm,p1);";
i++;code[i]="         crossp(e1,nrm,vc1); //edge planes";
i++;code[i]="         d1= dotp(e1,p1);";
i++;code[i]="         crossp(e2,nrm,vc2);";
i++;code[i]="         d2= dotp(e2,p2);";
i++;code[i]="         crossp(e3,nrm,vc3);";
i++;code[i]="         d3= dotp(e3,p3);";
i++;code[i]="      }";
i++;code[i]="      public double objint(T3d pos,T3d ray){";
i++;code[i]="         double s,k;";
i++;code[i]="         T3d point= new T3d();";
i++;code[i]="";
i++;code[i]="         k= dotp(nrm,ray); //plane intersection";
i++;code[i]="         if(k==0) return 0;";
i++;code[i]="         s= (d-dotp(nrm,pos))/ k;";
i++;code[i]="         if(s<=0) return 0;";
i++;code[i]="";
i++;code[i]="         point.x= pos.x + ray.x*s;";
i++;code[i]="         point.y= pos.y + ray.y*s;";
i++;code[i]="         point.z= pos.z + ray.z*s;";
i++;code[i]="";
i++;code[i]="         k= dotp(e1,point) - d1; //edge checks";
i++;code[i]="         if(k<0) return 0;";
i++;code[i]="         k= dotp(e2,point) - d2;";
i++;code[i]="         if(k<0) return 0;";
i++;code[i]="         k= dotp(e3,point) - d3;";
i++;code[i]="         if(k<0) return 0;";
i++;code[i]="         return s;";
i++;code[i]="      }";
i++;code[i]="      public void objnrm(T3d pos,T3d normal){";
i++;code[i]="         normal.x= nrm.x;";
i++;code[i]="         normal.y= nrm.y;";
i++;code[i]="         normal.z= nrm.z;";
i++;code[i]="   }  }";
i++;code[i]="";
i++;code[i]="   //------------------------------  c l a s s    v a r s  -------";
i++;code[i]="   private final int LIGHTS= 4;";
i++;code[i]="   private final int OBJECTS= 20;";
i++;code[i]="   private final int SCREENWIDTH= 250;";
i++;code[i]="   private final int SCREENHEIGHT= 250;";
i++;code[i]="   private final double ASPECTRATIO= 1.0;";
i++;code[i]="   private final double GAMMA= 1.4;";
i++;code[i]="   private final double DEGREETORADIAN= (Math.PI/180);";
i++;code[i]="   private final double FAR_AWAY= 99.99E+20;";
i++;code[i]="";
i++;code[i]="   private int nlight;";
i++;code[i]="   private TLight[] light= new TLight[LIGHTS];";
i++;code[i]="";
i++;code[i]="   private int nobject;";
i++;code[i]="   private TObject[] object= new TObject[OBJECTS];";
i++;code[i]="";
i++;code[i]="   private int sizex=250, sizey=250;    //image sizes";
i++;code[i]="   private T3d eyep=new T3d(480,85,70),lookp=new T3d(20,0,0),";
i++;code[i]="               up=new T3d(0,1,0);  //viewing";
i++;code[i]="   private double hfov=10,vfov=10; //fields of view";
i++;code[i]="   private int level=1,maxlevel=5; //reflection levels";
i++;code[i]="   private TColor background;";
i++;code[i]="";
i++;code[i]="   private int line_y,pixel_x, ri,gi,bi;";
i++;code[i]="   private T3d scrnx=new T3d(),scrny=new T3d(),";
i++;code[i]="               firstray=new T3d(),ray=new T3d();";
i++;code[i]="   private TColor color= new TColor();";
i++;code[i]="   private double dis;";
i++;code[i]="";
i++;code[i]="   private double s_litdis;";
i++;code[i]="   private Sim applet;";
i++;code[i]="";
i++;code[i]="   //--------------  r a y - t r a c e    c o n s t r u c t o r  -------";
i++;code[i]="   public Raytracer(Sim ap){";
i++;code[i]="      applet= ap;";
i++;code[i]="      scene1();";
i++;code[i]="      viewing(scrnx,scrny,firstray);";
i++;code[i]="   }";
i++;code[i]="";
i++;code[i]="   //---------------------------  r a y - t r a c e    s c e n e  --------";
i++;code[i]="   public void main(){ // render()";
i++;code[i]="      for(line_y=0;line_y<sizey;line_y++){";
i++;code[i]="         for(pixel_x=0;pixel_x<sizex;pixel_x++){";
i++;code[i]="            ray.x= firstray.x + (pixel_x * scrnx.x) - (line_y * scrny.x);";
i++;code[i]="            ray.y= firstray.y + (pixel_x * scrnx.y) - (line_y * scrny.y);";
i++;code[i]="            ray.z= firstray.z + (pixel_x * scrnx.z) - (line_y * scrny.z);";
i++;code[i]="            normalize(ray);";
i++;code[i]="            dis= intersect(-1, eyep, ray, color);";
i++;code[i]="            if(dis>0){";
i++;code[i]="               ri=gammacorrect(color.r);";
i++;code[i]="               gi=gammacorrect(color.g);";
i++;code[i]="               bi=gammacorrect(color.b);";
i++;code[i]="               putpixel(pixel_x,line_y, new Color(ri,gi,bi));";
i++;code[i]="            }else{";
i++;code[i]="               putpixel(pixel_x,line_y,new Color(";
i++;code[i]="                  (int)background.r,(int)background.g,(int)background.b));";
i++;code[i]="   }  }  }  }";
i++;code[i]="   public void trace(int x, int y){";
i++;code[i]="      ray.x= firstray.x + (x * scrnx.x) - (y * scrny.x);";
i++;code[i]="      ray.y= firstray.y + (x * scrnx.y) - (y * scrny.y);";
i++;code[i]="      ray.z= firstray.z + (x * scrnx.z) - (y * scrny.z);";
i++;code[i]="      normalize(ray);";
i++;code[i]="      dis= intersect(-1, eyep, ray, color);";
i++;code[i]="      if(dis>0){";
i++;code[i]="         ri=gammacorrect(color.r);";
i++;code[i]="         gi=gammacorrect(color.g);";
i++;code[i]="         bi=gammacorrect(color.b);";
i++;code[i]="         putpixel(x,y, new Color(ri,gi,bi));";
i++;code[i]="      }else{";
i++;code[i]="         putpixel(x,y,new Color(";
i++;code[i]="            (int)background.r,(int)background.g,(int)background.b));";
i++;code[i]="   }  }";
i++;code[i]="";
i++;code[i]="   //----------------------------------------  v i e w i n g  --------";
i++;code[i]="   private void viewing(T3d scrnx, T3d scrny, T3d firstray){";
i++;code[i]="      T3d gaze= new T3d();";
i++;code[i]="      double dist,magnitude;";
i++;code[i]="";
i++;code[i]="      gaze.x= lookp.x-eyep.x;";
i++;code[i]="      gaze.y= lookp.y-eyep.y;";
i++;code[i]="      gaze.z= lookp.z-eyep.z;";
i++;code[i]="      dist= normalize(gaze);";
i++;code[i]="      crossp(scrnx,gaze,up);";
i++;code[i]="      crossp(scrny,scrnx,gaze);";
i++;code[i]="";
i++;code[i]="      dist *=2.0;";
i++;code[i]="      magnitude = dist*Math.tan(hfov*DEGREETORADIAN)/sizex;";
i++;code[i]="      scrnx.x *= magnitude;";
i++;code[i]="      scrnx.y *= magnitude;";
i++;code[i]="      scrnx.z *= magnitude;";
i++;code[i]="      magnitude = dist*Math.tan(vfov*DEGREETORADIAN)/sizey;";
i++;code[i]="      scrny.x *= magnitude;";
i++;code[i]="      scrny.y *= magnitude;";
i++;code[i]="      scrny.z *= magnitude;";
i++;code[i]="";
i++;code[i]="      firstray.x = lookp.x - eyep.x;";
i++;code[i]="      firstray.y = lookp.y - eyep.y;";
i++;code[i]="      firstray.z = lookp.z - eyep.z;";
i++;code[i]="";
i++;code[i]="      firstray.x += sizey/2*scrny.x - sizex/2*scrnx.x;";
i++;code[i]="      firstray.y += sizey/2*scrny.y - sizex/2*scrnx.y;";
i++;code[i]="      firstray.z += sizey/2*scrny.z - sizex/2*scrnx.z;";
i++;code[i]="   }";
i++;code[i]="";
i++;code[i]="   //--------------------------------------  i n t e r s e c t  --------";
i++;code[i]="   private double intersect(int source, T3d pos, T3d ray, TColor color){";
i++;code[i]="      int objhit,objtry;";
i++;code[i]="      double s,ss;";
i++;code[i]="      T3d hit=new T3d(),normal=new T3d();";
i++;code[i]="";
i++;code[i]="      objhit=-1;";
i++;code[i]="      ss=FAR_AWAY;";
i++;code[i]="      for(objtry=0; objtry<nobject; objtry++){";
i++;code[i]="         if(objtry!=source){";
i++;code[i]="            s= object[objtry].objint(pos,ray);";
i++;code[i]="            if((s>0.0)&&(s<=ss)){";
i++;code[i]="               objhit=objtry;";
i++;code[i]="               ss=s;";
i++;code[i]="      }  }  }";
i++;code[i]="      if(objhit<0){ return 0; }";
i++;code[i]="";
i++;code[i]="      hit.x= pos.x + ss*ray.x;";
i++;code[i]="      hit.y= pos.y + ss*ray.y;";
i++;code[i]="      hit.z= pos.z + ss*ray.z;";
i++;code[i]="      object[objhit].objnrm(hit,normal);";
i++;code[i]="      shade(hit,ray,normal,objhit,color);";
i++;code[i]="      return ss;";
i++;code[i]="   }";
i++;code[i]="";
i++;code[i]="   //----------------------------------------  s h a d e  --------";
i++;code[i]="   private void shade(T3d pos,T3d ray,T3d nrm,int obj,TColor color){";
i++;code[i]="      int lnum;";
i++;code[i]="      double k,dis,bright,spec,diffuse;";
i++;code[i]="      T3d refl=new T3d(),ltray=new T3d();";
i++;code[i]="      TColor newcol=new TColor();";
i++;code[i]="";
i++;code[i]="      k= -2.0*dotp(ray,nrm);";
i++;code[i]="      refl.x= k*nrm.x + ray.x;";
i++;code[i]="      refl.y= k*nrm.y + ray.y;";
i++;code[i]="      refl.z= k*nrm.z + ray.z;";
i++;code[i]="";
i++;code[i]="      color.r= object[obj].ambiant.r; //ambient light contribution";
i++;code[i]="      color.g= object[obj].ambiant.g;";
i++;code[i]="      color.b= object[obj].ambiant.b;";
i++;code[i]="";
i++;code[i]="      for (lnum=0; lnum<nlight; lnum++){ //get ray to light";
i++;code[i]="         lightray(lnum,pos,ltray);";
i++;code[i]="         diffuse= dotp(nrm,ltray);";
i++;code[i]="         if(diffuse>0){ //object faces light, add diffuse";
i++;code[i]="            bright= brightness(obj,lnum,pos,ltray);";
i++;code[i]="            diffuse*= bright;";
i++;code[i]="            color.r+= object[obj].diffuse.r * diffuse;";
i++;code[i]="            color.g+= object[obj].diffuse.g * diffuse;";
i++;code[i]="            color.b+= object[obj].diffuse.b * diffuse;";
i++;code[i]="";
i++;code[i]="          spec= dotp(refl,ltray);";
i++;code[i]="          if(spec>0){ //highlight is here, add specular";
i++;code[i]="             spec = bright * Math.pow(spec,object[obj].coef);";
i++;code[i]="             color.r+= object[obj].specular.r * spec;";
i++;code[i]="             color.g+= object[obj].specular.g * spec;";
i++;code[i]="             color.b+= object[obj].specular.b * spec;";
i++;code[i]="      }  }  }";
i++;code[i]="      k= object[obj].refl; //reflection";
i++;code[i]="      if((k>0)&&(level<maxlevel)){";
i++;code[i]="         level++;";
i++;code[i]="         dis= intersect(obj,pos,refl,newcol);";
i++;code[i]="         if (dis>0){";                                    //////////////370
i++;code[i]="            color.r+= newcol.r*k;";
i++;code[i]="            color.g+= newcol.g*k;";
i++;code[i]="            color.b+= newcol.b*k;";
i++;code[i]="         }else{";
i++;code[i]="            color.r+= background.r*k;";
i++;code[i]="            color.g+= background.g*k;";
i++;code[i]="            color.b+= background.b*k;";
i++;code[i]="         }";
i++;code[i]="         level--;";
i++;code[i]="      }";
i++;code[i]="      k= object[obj].tran; //transparency";
i++;code[i]="      if(k>0){";
i++;code[i]="         color.r*= (1-k);";
i++;code[i]="         color.g*= (1-k);";
i++;code[i]="         color.b*= (1-k);";
i++;code[i]="         dis = intersect(obj,pos,ray,newcol);";
i++;code[i]="         if (dis > 0){";
i++;code[i]="            color.r+= newcol.r*k;";
i++;code[i]="            color.g+= newcol.g*k;";
i++;code[i]="            color.b+= newcol.b*k;";
i++;code[i]="         }else{";
i++;code[i]="            color.r+= background.r*k;";
i++;code[i]="            color.g+= background.g*k;";
i++;code[i]="            color.b+= background.b*k;";
i++;code[i]="   }  }  }";
i++;code[i]="";
i++;code[i]="   //---------------------------------------  l i g h t i n g  --------";
i++;code[i]="   private void lightray(int lnum,T3d pos,T3d lray){";
i++;code[i]="      lray.x= light[lnum].x-pos.x;";
i++;code[i]="      lray.y= light[lnum].y-pos.y;";
i++;code[i]="      lray.z= light[lnum].z-pos.z;";
i++;code[i]="      s_litdis= normalize(lray);";
i++;code[i]="   }";
i++;code[i]="   private double brightness(int source,int lnum,T3d pos,T3d ray){";
i++;code[i]="      int objtry;";
i++;code[i]="      double s;";
i++;code[i]="";
i++;code[i]="      for(objtry=0; objtry<nobject; objtry++){";
i++;code[i]="         if(objtry!=source){ //don't try source";
i++;code[i]="            s= object[objtry].objint(pos,ray);";
i++;code[i]="            if((s>0.0)&&(s<=s_litdis)){";
i++;code[i]="               return(0); //object in shadow";
i++;code[i]="      }  }  }";
i++;code[i]="      return(light[lnum].bright); //object not in shadow";
i++;code[i]="   }";
i++;code[i]="   private int gammacorrect(double intensity){";
i++;code[i]="      int ival;";
i++;code[i]="      double dval;";
i++;code[i]="";
i++;code[i]="      dval= intensity/255;";
i++;code[i]="      if(dval>1.0) dval=1;";
i++;code[i]="      if(dval<0.0) dval=0;";
i++;code[i]="";
i++;code[i]="      dval= Math.exp(Math.log(dval)/GAMMA);";
i++;code[i]="      dval*=255;";
i++;code[i]="      ival=(int)(dval+0.5);";
i++;code[i]="      return ival;";
i++;code[i]="   }";
i++;code[i]="";
i++;code[i]="   //--------------------------------------  m a t h  --------";
i++;code[i]="   private final double normalize(T3d t){";
i++;code[i]="      double d= Math.sqrt(t.x*t.x + t.y*t.y + t.z*t.z);";
i++;code[i]="      t.x/=d; t.y/=d; t.z/=d;";
i++;code[i]="      return d;";
i++;code[i]="   }";
i++;code[i]="   private final double dotp(T3d a,T3d b){";
i++;code[i]="      return ((a.x*b.x) + (a.y*b.y) + (a.z*b.z));";
i++;code[i]="   }";
i++;code[i]="   private final void crossp(T3d o,T3d a,T3d b){";
i++;code[i]="      double d;";
i++;code[i]="      o.x= a.y*b.z - a.z*b.y;";
i++;code[i]="      o.y= a.z*b.x - a.x*b.z;";
i++;code[i]="      o.z= a.x*b.y - a.y*b.x;";
i++;code[i]="      d= Math.sqrt(o.x*o.x + o.y*o.y + o.z*o.z);";
i++;code[i]="      o.x/= d;";
i++;code[i]="      o.y/= d;";
i++;code[i]="      o.z/= d;";
i++;code[i]="   }";
i++;code[i]="   public void scene1(){";
i++;
static_i=i;
//=======================
// end of static code
//=======================
i++;code[i]="   eyep=new T3d(480,85,70); lookp=new T3d(0,0,0);//480,85,70  500,85,-30";
i++;code[i]="   up=new T3d(0,1,0);";
i++;code[i]="   hfov=10; vfov=10;";
i++;code[i]="   maxlevel=5;";
i++;code[i]="   GAMMA= 1.4;";
i++;code[i]="   sizex=250; sizey=250;";
i++;code[i]="   viewing(scrnx,scrny,firstray);";
i++;code[i]="";   
i++;code[i]="   int i;";
i++;code[i]="   T3d p1=new T3d(),p2=new T3d(),p3=new T3d();";
i++;code[i]="";   
i++;code[i]="   background= new TColor(0,0,0);";  
i++;code[i]="   nlight=0; nobject=0;";
i++;code[i]="";   
i++;code[i]="   light[nlight]= new TLight(100,400,-100, 1);";
i++;code[i]="   nlight++;";
i++;code[i]="   light[nlight]= new TLight(300,20,1, 0.6);";
i++;code[i]="   nlight++;";
i++;code[i]="   light[nlight]= new TLight(-100,20,-100, 1);";
i++;code[i]="   nlight++;";
i++;code[i]="   light[nlight]= new TLight(300,-20,10, 0.6);";
i++;code[i]="   nlight++;";
i++;code[i]="";   
i++;code[i]="   for(i=nlight; i<LIGHTS; i++){ light[i]=null; }";
i++;code[i]="";   
i++;code[i]="   object[nobject]= new OBox(170,10,0, 7,10,7);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (0,50,0, 0,100,0, 30,60,0, 6,0,0.2); //green";
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   p1.x=  220; p1.y= 0; p1.z= 0; //top yellow";
i++;code[i]="   p2.x= -130; p2.y= 0; p2.z= -200;";
i++;code[i]="   p3.x= -130; p3.y= 0; p3.z= 200;";
i++;code[i]="   object[nobject]= new OTriangle(p1,p2,p3);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (80,80,0, 150,120,0, 90,80,20, 2,0.0,0.0);"; 
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   p1.x=  220; p1.y= 0;    p1.z= 0; // left bottom yellow";
i++;code[i]="   p2.x= -130; p2.y= 0;    p2.z= -200;";
i++;code[i]="   p3.x= -130; p3.y= -200; p3.z= -50;";
i++;code[i]="   object[nobject]= new OTriangle(p1,p2,p3);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (80,80,0, 150,120,0, 90,80,20, 2,0,0);"; 
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   p1.x= -130; p1.y= 120; p1.z= 0; // back mirror";
i++;code[i]="   p2.x= -130; p2.y= 0;   p2.z= -200;";
i++;code[i]="   p3.x= -130; p3.y= 0;   p3.z= 200;";
i++;code[i]="   object[nobject]= new OTriangle(p1,p3,p2);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (8,38,88, 8,38,88, 8,38,88, 2,0.8,0);";
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   p1.x= 220;  p1.y= 0;    p1.z= 0; // right bottom yellow";
i++;code[i]="   p2.x= -130; p2.y= 0;    p2.z= 200;";
i++;code[i]="   p3.x= -130; p3.y= -200; p3.z= -50;";
i++;code[i]="   object[nobject]= new OTriangle(p1,p2,p3);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (80,80,0, 150,120,0, 90,80,20, 2,0,0);"; 
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   object[nobject]= new OSphere(15, -22,25,60);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (255,0,0, 0,255,0, 0,0,255, 15,0.8,0); //transparent";
         //(90,90,90, 230,230,230, 110,110,110, 15,0.8,0); //transparent
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   object[nobject]= new OSphere(25, 30,55,0);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (90,90,90, 100,100,130, 230,230,230, 10,0,0.9); //grey reflective";
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   object[nobject]= new OSphere(13, 45,20,-60);";
i++;code[i]="   object[nobject].set_colors";
i++;code[i]="      (70,5,10, 100,10,20, 70,20,40, 6,0,0.2); //red";
i++;code[i]="   nobject++;";
i++;code[i]="";   
i++;code[i]="   for(i=nobject; i<OBJECTS; i++){ object[i]=null; }";
i++;code[i]="   }";      
   }//end of constructor


   /**
    *  test program, prints all lines of code from constructor, 
    *     and number of lines of code.  */
   public static void main(String[] args) {
      RaytracerSource r= new RaytracerSource();
      for(int i=0; i<r.get_lines_of_code(); i++){
         System.out.println(r.get_code(i));
      }
      System.out.println("get_lines_of_code: "+r.get_lines_of_code());
   }
}












